//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.10.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace ReSharperPlugin.nanoFrameworkPlugin
{
  
  
  /// <summary>
  /// <p>Generated from: NanoFrameworkProtocolModel.kt:10</p>
  /// </summary>
  public class NanoFrameworkProtocolModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IViewableProperty<CustomPropType> SomeProperty => _SomeProperty;
    [NotNull] public IRdEndpoint<DeployData, string[]> Deploy => _Deploy;
    [NotNull] public IRdCall<DeviceInfo[], Unit> SerialDeviceFound => _SerialDeviceFound;
    
    //private fields
    [NotNull] private readonly RdProperty<CustomPropType> _SomeProperty;
    [NotNull] private readonly RdCall<DeployData, string[]> _Deploy;
    [NotNull] private readonly RdCall<DeviceInfo[], Unit> _SerialDeviceFound;
    
    //primary constructor
    private NanoFrameworkProtocolModel(
      [NotNull] RdProperty<CustomPropType> someProperty,
      [NotNull] RdCall<DeployData, string[]> deploy,
      [NotNull] RdCall<DeviceInfo[], Unit> serialDeviceFound
    )
    {
      if (someProperty == null) throw new ArgumentNullException("someProperty");
      if (deploy == null) throw new ArgumentNullException("deploy");
      if (serialDeviceFound == null) throw new ArgumentNullException("serialDeviceFound");
      
      _SomeProperty = someProperty;
      _Deploy = deploy;
      _SerialDeviceFound = serialDeviceFound;
      _SomeProperty.OptimizeNested = true;
      _Deploy.Async = true;
      _SerialDeviceFound.Async = true;
      BindableChildren.Add(new KeyValuePair<string, object>("someProperty", _SomeProperty));
      BindableChildren.Add(new KeyValuePair<string, object>("deploy", _Deploy));
      BindableChildren.Add(new KeyValuePair<string, object>("serialDeviceFound", _SerialDeviceFound));
    }
    //secondary constructor
    internal NanoFrameworkProtocolModel (
    ) : this (
      new RdProperty<CustomPropType>(CustomPropType.Read, CustomPropType.Write),
      new RdCall<DeployData, string[]>(DeployData.Read, DeployData.Write, ReadStringArray, WriteStringArray),
      new RdCall<DeviceInfo[], Unit>(ReadDeviceInfoArray, WriteDeviceInfoArray, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<string[]> ReadStringArray = JetBrains.Rd.Impl.Serializers.ReadString.Array();
    public static CtxReadDelegate<DeviceInfo[]> ReadDeviceInfoArray = DeviceInfo.Read.Array();
    
    public static  CtxWriteDelegate<string[]> WriteStringArray = JetBrains.Rd.Impl.Serializers.WriteString.Array();
    public static  CtxWriteDelegate<DeviceInfo[]> WriteDeviceInfoArray = DeviceInfo.Write.Array();
    
    protected override long SerializationHash => 5757355806742605723L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("NanoFrameworkProtocolModel (");
      using (printer.IndentCookie()) {
        printer.Print("someProperty = "); _SomeProperty.PrintEx(printer); printer.Println();
        printer.Print("deploy = "); _Deploy.PrintEx(printer); printer.Println();
        printer.Print("serialDeviceFound = "); _SerialDeviceFound.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionNanoFrameworkProtocolModelEx
   {
    public static NanoFrameworkProtocolModel GetNanoFrameworkProtocolModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("nanoFrameworkProtocolModel", () => new NanoFrameworkProtocolModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: NanoFrameworkProtocolModel.kt:16</p>
  /// </summary>
  public sealed class CustomPropType : IPrintable, IEquatable<CustomPropType>
  {
    //fields
    //public fields
    [NotNull] public string SomeString {get; private set;}
    public bool SomeBool {get; private set;}
    [NotNull] public string[] SomeArray {get; private set;}
    
    //private fields
    //primary constructor
    public CustomPropType(
      [NotNull] string someString,
      bool someBool,
      [NotNull] string[] someArray
    )
    {
      if (someString == null) throw new ArgumentNullException("someString");
      if (someArray == null) throw new ArgumentNullException("someArray");
      
      SomeString = someString;
      SomeBool = someBool;
      SomeArray = someArray;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string someString, out bool someBool, [NotNull] out string[] someArray)
    {
      someString = SomeString;
      someBool = SomeBool;
      someArray = SomeArray;
    }
    //statics
    
    public static CtxReadDelegate<CustomPropType> Read = (ctx, reader) => 
    {
      var someString = reader.ReadString();
      var someBool = reader.ReadBool();
      var someArray = ReadStringArray(ctx, reader);
      var _result = new CustomPropType(someString, someBool, someArray);
      return _result;
    };
    public static CtxReadDelegate<string[]> ReadStringArray = JetBrains.Rd.Impl.Serializers.ReadString.Array();
    
    public static CtxWriteDelegate<CustomPropType> Write = (ctx, writer, value) => 
    {
      writer.Write(value.SomeString);
      writer.Write(value.SomeBool);
      WriteStringArray(ctx, writer, value.SomeArray);
    };
    public static  CtxWriteDelegate<string[]> WriteStringArray = JetBrains.Rd.Impl.Serializers.WriteString.Array();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((CustomPropType) obj);
    }
    public bool Equals(CustomPropType other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return SomeString == other.SomeString && SomeBool == other.SomeBool && SomeArray.SequenceEqual(other.SomeArray);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + SomeString.GetHashCode();
        hash = hash * 31 + SomeBool.GetHashCode();
        hash = hash * 31 + SomeArray.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("CustomPropType (");
      using (printer.IndentCookie()) {
        printer.Print("someString = "); SomeString.PrintEx(printer); printer.Println();
        printer.Print("someBool = "); SomeBool.PrintEx(printer); printer.Println();
        printer.Print("someArray = "); SomeArray.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: NanoFrameworkProtocolModel.kt:28</p>
  /// </summary>
  public sealed class DeployData : IPrintable, IEquatable<DeployData>
  {
    //fields
    //public fields
    [NotNull] public string BasePath {get; private set;}
    [CanBeNull] public string[] Assemblies {get; private set;}
    
    //private fields
    //primary constructor
    public DeployData(
      [NotNull] string basePath,
      [CanBeNull] string[] assemblies
    )
    {
      if (basePath == null) throw new ArgumentNullException("basePath");
      
      BasePath = basePath;
      Assemblies = assemblies;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string basePath, [CanBeNull] out string[] assemblies)
    {
      basePath = BasePath;
      assemblies = Assemblies;
    }
    //statics
    
    public static CtxReadDelegate<DeployData> Read = (ctx, reader) => 
    {
      var basePath = reader.ReadString();
      var assemblies = ReadStringArrayNullable(ctx, reader);
      var _result = new DeployData(basePath, assemblies);
      return _result;
    };
    public static CtxReadDelegate<string[]> ReadStringArrayNullable = JetBrains.Rd.Impl.Serializers.ReadString.Array().NullableClass();
    
    public static CtxWriteDelegate<DeployData> Write = (ctx, writer, value) => 
    {
      writer.Write(value.BasePath);
      WriteStringArrayNullable(ctx, writer, value.Assemblies);
    };
    public static  CtxWriteDelegate<string[]> WriteStringArrayNullable = JetBrains.Rd.Impl.Serializers.WriteString.Array().NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((DeployData) obj);
    }
    public bool Equals(DeployData other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return BasePath == other.BasePath && Equals(Assemblies, other.Assemblies);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + BasePath.GetHashCode();
        hash = hash * 31 + (Assemblies != null ? Assemblies.ContentHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("DeployData (");
      using (printer.IndentCookie()) {
        printer.Print("basePath = "); BasePath.PrintEx(printer); printer.Println();
        printer.Print("assemblies = "); Assemblies.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: NanoFrameworkProtocolModel.kt:39</p>
  /// </summary>
  public sealed class DeviceInfo : IPrintable, IEquatable<DeviceInfo>
  {
    //fields
    //public fields
    [NotNull] public string PortName {get; private set;}
    [NotNull] public string DeviceName {get; private set;}
    
    //private fields
    //primary constructor
    public DeviceInfo(
      [NotNull] string portName,
      [NotNull] string deviceName
    )
    {
      if (portName == null) throw new ArgumentNullException("portName");
      if (deviceName == null) throw new ArgumentNullException("deviceName");
      
      PortName = portName;
      DeviceName = deviceName;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string portName, [NotNull] out string deviceName)
    {
      portName = PortName;
      deviceName = DeviceName;
    }
    //statics
    
    public static CtxReadDelegate<DeviceInfo> Read = (ctx, reader) => 
    {
      var portName = reader.ReadString();
      var deviceName = reader.ReadString();
      var _result = new DeviceInfo(portName, deviceName);
      return _result;
    };
    
    public static CtxWriteDelegate<DeviceInfo> Write = (ctx, writer, value) => 
    {
      writer.Write(value.PortName);
      writer.Write(value.DeviceName);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((DeviceInfo) obj);
    }
    public bool Equals(DeviceInfo other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return PortName == other.PortName && DeviceName == other.DeviceName;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + PortName.GetHashCode();
        hash = hash * 31 + DeviceName.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("DeviceInfo (");
      using (printer.IndentCookie()) {
        printer.Print("portName = "); PortName.PrintEx(printer); printer.Println();
        printer.Print("deviceName = "); DeviceName.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
